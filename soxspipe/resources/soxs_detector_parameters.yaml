
VIS:
  # AMOUNT RAW-FRAMES NEED ROTATED BEFORE REDUCTION
  clockwise-rotation: 0
  # science pixel values for un-binned frames (binning handled in code)
  science-pixels:
    # NAXIS1 == x-axis
    columns:
      start: 50
      end: 858
    # NAXIS2 == y-axis
    rows:
      start: 0
      end: 4096
  # DEFAULT BINNING [y, x]
  binning: [1, 1]
  gain: 1. # e/ADU
  ron: 3.80 # e
  saturation: 65535.
  bad-pixel map:
    1x1: BP_MAP_RP_VIS_1x1.fits
    1x2: BP_MAP_RP_VIS_1x2.fits
    2x1: BP_MAP_RP_VIS_2x1.fits
    2x2: BP_MAP_RP_VIS_2x2.fits
  predicted pinhole lines:
    single:
      1x1: SOXS_SPH_TAB_VIS_ThAr_1x1.fits
      2x1: SOXS_SPH_TAB_VIS_ThAr_2x1.fits
    multi:
      1x1: SOXS_MPH_TAB_VIS_ThAr_1x1.fits
      2x1: SOXS_MPH_TAB_VIS_ThAr_2x1.fits
  mid_slit_index: 4
  spectral format table: SOXS_SPECTRAL_FORMAT_TAB_VIS.fits
  slit_length: 12 #arcsec
  line-atlas: ThAr.fits
  dispersion-axis: x
  rotate-qc-plot: 90
  flip-qc-plot: 1
  extinction: extinction_lasilla.fits
  flux-standards: flux_standards.fits

NIR:
  # AMOUNT RAW-FRAMES NEED ROTATED BEFORE REDUCTION
  clockwise-rotation: 0
  # # science pixel values for un-binned frames (binning handled in code)
  science-pixels: 
    # NAXIS1 == x-axis
    columns:
      start: 4
      end: 2044
    # NAXIS2 == y-axis
    rows:
      start: 4
      end: 2044
  # # DEFAULT BINNING [y, x]
  binning: [1, 1]
  # saturation: 2.0e5
  gain: 1. # e/ADU
  ron: 7.0 # read noise is exposure time dependent so need to calculate somehow - is this the same for soxs?
  bad-pixel map:
    1x1: BP_MAP_RP_NIR.fits
  predicted pinhole lines:
    single:
      #1x1: SOXS_SPH_TAB_NIR_Xe.fits
      1x1: ArHgNeXe_clean_within_2.0pixel.fits
    multi:
      # 1x1: SOXS_MPH_TAB_NIR_Xe.fits
      #1x1: Hg.fits
      1x1: ArHgNeXe_clean_within_2.0pixel.fits
  mid_slit_index: 4
  spectral format table: SOXS_SPECTRAL_FORMAT_TAB_NIR.fits
  slit_length: 12 #arcsec
  line-atlas: ArHgNeXe.fits
  dispersion-axis: y
  rotate-qc-plot: 0
  flip-qc-plot: 1
  extinction: extinction_lasilla.fits
  flux-standards: flux_standards.fits
